const { sequelize } = require('../models');

const initDatabase = async () => {
  try {
    console.log('üîÑ Initialisation de la base de donn√©es MySQL...\n');

    // Test de connexion
    await sequelize.authenticate();
    console.log('‚úÖ Connexion √† la base de donn√©es √©tablie');

    // Synchronisation des mod√®les (cr√©ation des tables)
    console.log('üîÑ Synchronisation des mod√®les...');
    await sequelize.sync({ force: false }); // force: true pour recr√©er les tables
    console.log('‚úÖ Tables cr√©√©es/mises √† jour avec succ√®s');

    // Afficher les tables cr√©√©es
    const dialect = sequelize.getDialect();
    let results;

    if (dialect === 'mysql') {
      [results] = await sequelize.query("SHOW TABLES");
    } else if (dialect === 'sqlite') {
      [results] = await sequelize.query("SELECT name FROM sqlite_master WHERE type='table'");
    }

    console.log('\nüìã Tables dans la base de donn√©es:');
    results.forEach(row => {
      const tableName = dialect === 'mysql' ? Object.values(row)[0] : row.name;
      console.log(`   - ${tableName}`);
    });

    console.log('\nüéâ Base de donn√©es initialis√©e avec succ√®s!');
    console.log('\nüìù Prochaines √©tapes:');
    console.log('   1. Ex√©cuter: node scripts/create-admin.js (pour cr√©er un administrateur)');
    console.log('   2. D√©marrer le serveur: npm start');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation:', error.message);

    if (error.name === 'SequelizeConnectionError') {
      console.log('\nüîß V√©rifiez votre configuration de base de donn√©es dans le fichier .env:');
      console.log('   - DB_HOST');
      console.log('   - DB_PORT');
      console.log('   - DB_NAME');
      console.log('   - DB_USER');
      console.log('   - DB_PASSWORD');
    }
  } finally {
    await sequelize.close();
    process.exit();
  }
};

initDatabase();